name: space control panel - UI

on:
  push:
    branches: [ main ]

  pull_request:
    branches: [ main ]

  workflow_dispatch:

env:
  ARTIFACT_NAME: 'ui artifact'
  ARTIFACT_RETENTION_DAYS: 30
  ARTIFACT_BUILD_TARGET_FILEPATH: './dist/'
  ARTIFACT_BUCKET_NAME: 'space-control-panel-artifacts'

  DEFAULT_API_URL_PLACEHOLDER_FILEPATH: ./dist/index.html
  DEFAULT_API_URL_PLACEHOLDER: '%%API_URL_PLACEHOLDER%%'

  NODE_VERSION: '14.18.2'

  API_URL_PRODUCTION: https://api.ufostart.com
  APP_URL_PRODUCTION: https://space-control-center.ufostart.com
  TAG_NAME_PRODUCTION: production

  API_URL_STAGING: https://staging.api.ufostart.com
  APP_URL_STAGING: https://staging.space-control-center.ufostart.com
  TAG_NAME_STAGING: staging

jobs:
  build_and_test:
    name: Build and test UI
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Prepare environment values
        id: environment_values
        uses: ./.github/actions/define-environment-values
        with:
          api-url: ${{ env.API_URL_STAGING }}
          app-url: ${{ env.APP_URL_STAGING }}

      - name: Define node version
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: debug variables
        run: |
          echo "event_name:     '${{github.event_name}}"
          echo "api url:        '${{ steps.environment_values.outputs.api-url }}'"
          echo "app url:        '${{ steps.environment_values.outputs.app-url }}'"
          echo "GITHUB_RUN_ID:  '$GITHUB_RUN_ID'"
          echo "GITHUB_SHA:     '$GITHUB_SHA'"

      # step one
      - name: Build, Test
        run: |
          echo "build & test for : apiUrl='${{ steps.environment_values.outputs.api-url }}'"
          echo "apiUrl: '${{ steps.environment_values.outputs.api-url }}'" > dist/artifact.txt

      - name: Resolve issue number
        id: resolved_issue_number
        uses: ./.github/actions/resolve-issue-number

      - name: Resolve artifact
        id: resolved_artifact
        uses: ./.github/actions/resolve-artifact
        with:
          issue-number: ${{ steps.resolved_issue_number.outputs.issue-number }}
          sha: ${{ github.sha }}
          bucket-name: ${{ env.ARTIFACT_BUCKET_NAME }}

      - name: Zip artifact
        uses: ./.github/actions/package-artifact
        with:
          action: 'zip'
          source: ${{ env.ARTIFACT_BUILD_TARGET_FILEPATH }}
          target: './${{ steps.resolved_artifact.outputs.filename }}'

      - name: Publish artifact to S3 artifact store
        uses: ./.github/actions/aws-s3-artifact-transfer
        with:
          access-key-id: ${{ secrets.ARTIFACT_ACCESS_KEY_ID }}
          secret-access-key: ${{ secrets.ARTIFACT_SECRET_ACCESS_KEY }}
          region: ${{ secrets.ARTIFACT_REGION }}
          source-path: './${{ steps.resolved_artifact.outputs.filename }}'
          target-path: '${{ steps.resolved_artifact.outputs.s3-url }}'

      - name: Create artifact comment
        uses: actions/github-script@v6
        with:
          script: |
            const issueNumber = process.env.ISSUE_NUMBER
            await github.rest.issues.createComment({
              issue_number: parseInt('${{ steps.resolved_issue_number.outputs.issue-number }}'),
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: "Artifact created: ${{ steps.resolved_artifact.outputs.s3-url }}"
            })

      - name: Create artifact comment
        id: create_artifact_comment
        uses: actions/github-script@v6
        with:
          script: |
            const issueNumber = process.env.ISSUE_NUMBER
            await github.rest.issues.createComment({
              issue_number: parseInt('${{ steps.resolved_issue_number.outputs.issue-number }}'),
              owner: context.repo
            })
            
            const comments = await octokit.issues.listComments({
              ...context.repo,
              issue_number: parseInt('${{ steps.resolved_issue_number.outputs.issue-number }}'),
            })
            
            const actionComment = comments.data.find(
              (comment) => comment.body.indexOf("Artifact created: ") >= 0
            );
            
            console.log(actionComment)
            
            if (!actionComment) {
              throw new Error("No comment found that has the right pattern");
            }
            
            return actionComment.body.replace("Artifact created: ", "").trim()

      - name: Print
        run: |
          echo '${{ steps.create_artifact_comment.outputs.return}}'

#  deploy_to_staging:
#    name: Deploy UI to staging
#    runs-on: ubuntu-latest
#    if: github.event_name == 'push'
#    needs: [build_and_test]
#    environment:
#      name: staging
#      url: ${{ steps.environment_values.outputs.app-url }}
#    steps:
#      - uses: actions/checkout@v2
#
#      - name: Prepare environment values
#        id: environment_values
#        uses: ./.github/actions/define-environment-values
#        with:
#          api-url: ${{ env.API_URL_STAGING }}
#          app-url: ${{ env.APP_URL_STAGING }}
#
#      - name: Fetch UI build artifact
#        uses: actions/download-artifact@v2
#        with:
#          name: ${{ env.ARTIFACT_NAME }}
#          path: ${{ env.ARTIFACT_BUILD_TARGET_FILEPATH }}
#
#      - name: Define api url
#        uses: ./.github/actions/replace-string-in-file
#        with:
#          filepath: ${{ env.DEFAULT_API_URL_PLACEHOLDER_FILEPATH }}
#          search: ${{ env.DEFAULT_API_URL_PLACEHOLDER }}
#          replacement: ${{ steps.environment_values.outputs.api-url }}
#
#      - name: Deploy artifact
#        run: |
#          cat '${{ env.ARTIFACT_BUILD_TARGET_FILEPATH }}/artifact.txt'
#
#      - name: Tag artifact
#        uses: ./.github/actions/add-environment-datetime-tag
#        if: always()
#        with:
#          github-token: ${{ secrets.GITHUB_TOKEN }}
#          environment-name: ${{ env.TAG_NAME_STAGING }}
#          datetime: ${{ steps.environment_values.outputs.current-datetime }}
#
#  deploy_to_production:
#    name: Deploy UI to production
#    runs-on: ubuntu-latest
#    if: github.event_name == 'push'
#    needs: [build_and_test,deploy_to_staging]
#    environment:
#      name: production
#      url: ${{ steps.environment_values.outputs.app-url }}
#    steps:
#      - uses: actions/checkout@v2
#
#      - name: Prepare environment values
#        id: environment_values
#        uses: ./.github/actions/define-environment-values
#        with:
#          api-url: ${{ env.API_URL_PRODUCTION }}
#          app-url: ${{ env.APP_URL_PRODUCTION }}
#
#      - name: Fetch UI build artifact
#        uses: actions/download-artifact@v2
#        with:
#          name: ${{ env.ARTIFACT_NAME }}
#          path: ${{ env.ARTIFACT_BUILD_TARGET_FILEPATH }}
#
#      - name: Define api url
#        uses: ./.github/actions/replace-string-in-file
#        with:
#          filepath: ${{ env.DEFAULT_API_URL_PLACEHOLDER_FILEPATH }}
#          search: ${{ env.DEFAULT_API_URL_PLACEHOLDER }}
#          replacement: ${{ steps.environment_values.outputs.api-url }}
#
#      - name: Deploy artifact
#        run: |
#          cat '${{ env.ARTIFACT_BUILD_TARGET_FILEPATH }}/artifact.txt'
#
#      - name: Tag artifact
#        uses: ./.github/actions/add-environment-datetime-tag
#        if: always()
#        with:
#          github-token: ${{ secrets.GITHUB_TOKEN }}
#          environment-name: ${{ env.TAG_NAME_PRODUCTION }}
#          datetime: ${{ steps.environment_values.outputs.current-datetime }}
