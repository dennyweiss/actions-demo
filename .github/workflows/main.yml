# Action that is able to actually release an artifact to an environment
name: Check, Build, Test & Deploy UI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]

  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  API_URL_PRODUCTION: https://api.ufostart.com
  APP_URL_PRODUCTION: https://space-control-center.ufostart.com
  API_URL_STAGING: https://staging.api.ufostart.com
  APP_URL_STAGING: https://staging.space-control-center.ufostart.com

jobs:

  check_build_staging:
    name: Check, build & test artifact
    runs-on: ubuntu-latest
    steps:
      - name: Prepare variables
        id: environment_variables
        run: |
          echo "::set-output name=api_url::${{ env.API_URL_STAGING }}"
          echo "::set-output name=app_url::${{ env.APP_URL_STAGING }}"
          echo "VITE_API_URL=${{ env.API_URL_STAGING }}" >> $GITHUB_ENV
      - uses: actions/checkout@v2

      - name: Define node version
        uses: actions/setup-node@v2
        with:
          node-version: '14.18.2'

      - name: debug variables
        run: |
          echo "event_name:     '${{github.event_name}}"
          echo "api url:        '${{ env.API_URL_STAGING }}'-env'${{ env.VITE_API_URL }}'-$VITE_API_URL"
          echo "app url:        '${{ env.APP_URL_STAGING }}'"
          echo "GITHUB_RUN_ID:  '$GITHUB_RUN_ID'"
          echo "GITHUB_SHA:     '$GITHUB_SHA'"

      # step one
      - name: Build, Test
        run: |
          echo "build & test for : VITE_API_URL='${{ env.VITE_API_URL }}'"
          sleep 10
          
          echo 'yarn install'
          echo 'yarn code:style'
          echo 'yarn code:analyse'
          echo 'yarn build'
          echo 'yarn test'
          
          ./shell_script.sh
          if [[ ! -d dist ]]; then
            mkdir -p dist
          fi
          echo "VITE_API_URL: '${VITE_API_URL}'" > dist/artifact.txt
        env:
          SHELL_SCRIPT_RESULT_OK: ${{ secrets.SHELL_SCRIPT_RESULT_OK }}

      # when push instead of merge
      - name: Upload UI build artifact
        if: github.event_name == 'push'
        uses: actions/upload-artifact@v2
        with:
          name: ui_artifact_production
          path: dist/
          retention-days: 30
    outputs:
      api_url: ${{ steps.environment_variables.outputs.api_url }}
      app_url: ${{ steps.environment_variables.outputs.app_url }}

  deployment_staging:
    name: Deploy to staging
    environment:
      name: staging
      url: ${{ needs.check_build_staging.outputs.app_url }}
    runs-on: ubuntu-latest
    needs: [check_build_staging]
    if: github.event_name == 'push'

    steps:
      - name: Download UI build artifact
        uses: actions/download-artifact@v2
        with:
          name: ui_artifact_staging
          path: dist

      - name: Deploy artifact
        run: |
          cat dist/artifact.txt

  check_build_test_deploy_production:
    name: Deploy to production
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    needs: [check_build_staging,deployment_staging]
    environment:
      name: production
      url: ${{ steps.environment_variables.outputs.app_url }}
    steps:
      - name: Prepare variables
        id: environment_variables
        run: |
          echo "::set-output name=api_url::${{ env.API_URL_STAGING }}"
          echo "::set-output name=app_url::${{ env.APP_URL_STAGING }}"
          echo "VITE_API_URL=${{ env.API_URL_STAGING }}" >> $GITHUB_ENV
      - uses: actions/checkout@v2

      - name: Define node version
        uses: actions/setup-node@v2
        with:
          node-version: '14.18.2'

      - name: debug variables
        run: |
          echo "event_name:     '${{github.event_name}}"
          echo "api url:        '${{ env.API_URL_STAGING }}'-env'${{ env.VITE_API_URL }}'-$VITE_API_URL"
          echo "app url:        '${{ env.APP_URL_STAGING }}'"
          echo "GITHUB_RUN_ID:  '$GITHUB_RUN_ID'"
          echo "GITHUB_SHA:     '$GITHUB_SHA'"

      # step one
      - name: Build, Test
        run: |
          echo "build & test for : VITE_API_URL='${{ env.VITE_API_URL }}'"
          sleep 10
          
          echo 'yarn install'
          echo 'yarn code:style'
          echo 'yarn code:analyse'
          echo 'yarn build'
          echo 'yarn test'
          
          ./shell_script.sh
          if [[ ! -d dist ]]; then
            mkdir -p dist
          fi
          echo "VITE_API_URL: '${VITE_API_URL}'" > dist/artifact.txt
        env:
          SHELL_SCRIPT_RESULT_OK: ${{ secrets.SHELL_SCRIPT_RESULT_OK }}

      # when push instead of merge
      - name: Upload UI build artifact
        if: github.event_name == 'push'
        uses: actions/upload-artifact@v2
        with:
          name: ui_artifact_production
          path: dist/
          retention-days: 30

      - name: Deploy artifact
        run: |
          cat dist/artifact.txt
